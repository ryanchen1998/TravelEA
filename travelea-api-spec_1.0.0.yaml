openapi: 3.0.0

info:
  description: SENG302 Team 400 - Travel EA
  version: "1.0.0-oas3"
  title: Travel EA
  contact:
    email: s302team400@cosc.canterbury.ac.nz
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
- name: Admin
  description: Admin calls
- name: Users
  description: User account calls
- name: Profiles
  description: Profile calls
- name: Destinations
  description: Destination calls
- name: Trips
  description: Trip calls
- name: Photos
  description: Photo calls

paths:

  '/user':
    post:
      tags:
      - Users
      summary: Register a new user.
      description: |
        Creates a new user and adds to database
      responses:
        '200':
          description: Success
          headers:
            JWT-Auth:
              description: Authentication cookie
              schema:
                type: string
        '400':
          description: Invalid user data | Email already in use
      requestBody:
        $ref: '#/components/requestBodies/postUser'

    delete:
      tags:
      - Users
      summary: Delete the user logged in.
      description: |
        Deletes the logged in user from the database
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      responses:
        '200':
          description: 'Successfully deleted user with uid&#58; {userId}'
        '400':
          description: No user with such uid found | Cannot delete Master user
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  '/user/{id}':
    delete:
      tags:
      - Users
      summary: Delete the user with specified ID.
      description: |
        Deletes the user specified by id parameter from the database
      security:
      - UserToken: []
      parameters:
      - in: path
        name: id
        required: true
        description: The user ID to be deleted.
        schema:
          type: integer
          minimum: 1
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      responses:
        '200':
          description: 'Successfully deleted user with uid&#58; {userId}'
        '400':
          description: No user with such uid found | Cannot delete Master user
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    get:
      tags:
      - Users
      summary: Gets the user with specified ID
      security:
      - UserToken: []
      parameters:
      - in: path
        name: id
        required: true
        description: The user ID
        schema:
          type: integer
          minimum: 1
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: No user with such uid found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden


  '/login':
    post:
      tags:
      - Users
      summary: Login to user account.
      description: |
        Provides authentication to user logging in and stores in database.
      responses:
        '200':
          description: Success
          headers:
            JWT-Auth:
              description: Authentication cookie
              schema:
                type: string
        '400':
          description: Invalid user data
      requestBody:
        $ref: '#/components/requestBodies/postUser'

  '/logout':
    post:
      tags:
      - Users
      summary: Logout of user account.
      description: |
        Removes authentication attached to user from database.
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized

  '/user/search':
    get:
      tags:
      - Users
      summary: Get list of users which match search criteria
      description: |
        Allows admin to retrieve a list of users which match the search criteria
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Admin authentication cookie.
        schema:
          type: string
      - in: query
        name: order
        description: asc or desc
        schema:
          type: string
      - in: query
        name: filter
        description: Username search filter
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  '/user/setId':
    get:
      tags:
      - Users
      summary: Reset user cookie
      description: |
        Resets the users cookie when user is authenticated but user-id cookie is deleted
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The authenticated user's id
        '401':
          description: Unauthorized

  '/trip/{id}':
    get:
      tags:
      - Trips
      summary: Get trip with given ID
      parameters:
      - in: path
        name: id
        required: true
        description: The ID of the trip to retrieve
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Successfully retrieved trip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: No such trip found

  '/user/trips/{id}':
    get:
      tags:
      - Trips
      summary: Get all trips for user with given user Id
      security:
      - UserToken: []
      parameters:
      - in: path
        name: id
        required: true
        description: The user ID
        schema:
          type: integer
          minimum: 1
      - in: header
        name: JWT-Auth
        required: true
        description: Authetication cookie.
        schema:
          type: string
      responses:
        '200':
          description: All trips of user (may be empty list)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trip'
        '401':
          description: Unauthorized
        '404':
          description: User not found

  '/trip':
    get:
      tags:
      - Trips
      summary: Get all trips
      responses:
        '200':
          description: Successfully retrieved all trips
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trip'

    post:
      tags:
      - Trips
      summary: Add a new trip
      description: |
        Inserts a new trip into the database, for the currently logged in user
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/postTrip'
      responses:
        '200':
          description: Successfully added trip
        '400':
          description: Invalid data supplied, ErrorResponse returned detailing specific validation failures
        '401':
          description: Unauthorized

    put:
      tags:
      - Trips
      summary: Update an existing trip
      description: |
        Updates an existing trip on the database, for the currently logged in user
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/putTrip'
      responses:
        '200':
          description: Successfully updated trip
        '400':
          description: Invalid data supplied, ErrorResponse returned detailing specific validation failures
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    delete:
      tags:
      - Trips
      summary: Delete trip with given ID
      security:
      - UserToken: []
      parameters:
      - in: path
        name: id
        required: true
        description: The ID of the trip to delete
        schema:
          type: integer
          minimum: 1
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted trip
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: No such trip found

  '/trip/privacy':
    put:
      tags:
      - Trips
      summary: Updates an existing trip's privacy
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/putTrip'
      responses:
        '200':
          description: Successfully updated trip
        '400':
          description: Invalid data supplied, ErrorResponse returned detailing specific validation failures
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  '/destination/getCountries':
    get:
      tags:
      - Destinations
      summary: Get all possible country options
      responses:
        '200':
          description: Successfully retrieved all countries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CountryDefinition'

  '/user/destination/{id}':
    get:
      tags:
      - Destinations
      summary: Get all destinations for given user ID
      description: Gets all public destinations as well as private destinations for request user ID
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      - in: path
        name: id
        required: true
        description: The user ID
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Successfully retrieved all destinations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Destination'

  '/destination':
    post:
      tags:
      - Destinations
      summary: Add a new destination
      description: |
        Inserts a destination into the database, that is owned by the current user
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Destination'
      responses:
        '200':
          description: Successfully added destination
        '400':
          description: Invalid data supplied, ErrorResponse returned detailing specific validation failures
        '401':
          description: Unauthorized

  '/destination/{id}':
    get:
      tags:
      - Destinations
      summary: Get destination with given ID
      parameters:
      - in: path
        name: id
        required: true
        description: The ID of the destination to retrieve
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Successfully retrieved destination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
        '404':
          description: No such destination found

    delete:
      tags:
      - Destinations
      summary: Delete destination with given ID
      security:
      - UserToken: []
      parameters:
      - in: path
        name: id
        required: true
        description: The ID of the destination to delete
        schema:
          type: integer
          minimum: 1
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted destination
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: No such destination found

  '/destination/search':
    get:
      tags:
      - Destinations
      summary: Searches through all destinations based on some criteria
      parameters:
      - in: query
        name: p
        description: Number of page to get
        schema:
          type: integer
          minimum: 0
      - in: query
        name: pSize
        description: Number of results to show per page
        schema:
          type: integer
      - in: query
        name: filter
        description: Filter criteria by which to search desinations
        schema:
          type: string
      - in: query
        name: order
        description: Whether to sort ascending or descending
        schema:
          type: string
          description: "Either 'asc' or 'desc'"
      responses:
        '200':
          description: Successfully retrieved (possibly zero) destinations

  '/destination/makePublic/{id}':
    put:
      tags:
      - Destinations
      summary: Marks destination as public
      description: Allows a user to mark one of their destinations as public, this will cause it to become immediately visible to all other users, as well as merging with any sufficiently similar destinations that are currently marked as private in the database
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      - in: path
        name: id
        required: true
        description: The ID of the destination to mark public
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Successfully marked destination as public
        '403':
          description: Forbidden, you are not allowed to perform this action
        '404':
          description: No such destination exists



  '/profile/getTravellerTypes/':
    get:
      tags:
      - Profiles
      summary: Get all possible traveller types
      responses:
        '200':
          description: Successfully retrieved all traveller types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TravellerTypeDefinition'

  '/profile':
    post:
      tags:
      - Profiles
      summary: Add a new profile (NEEDS TO BE MADE FOR LOGGED IN USER ONLY)
      description: |
        Inserts a profile for the currently logged in user
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Destination'
      responses:
        '200':
          description: Successfully added destination
        '400':
          description: Invalid data supplied, ErrorResponse returned detailing specific validation failures
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Profile already exists for this user

    get:
      tags:
      - Profiles
      summary: Get profile of currently logged in user
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      responses:
        '200':
          description: Successfully retrieved profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: Unauthorized

  '/profile/search':
    get:
      tags:
      - Profiles
      summary: Searches through all profiles based on some criteria
      parameters:
      - in: query
        name: nationalityId
        description: ID of some nationality to search by
        schema:
          type: integer
          format: int64
          minimum: 0
      - in: query
        name: travellerTypeId
        description: ID of some traveller type to search by
        schema:
          type: integer
          format: int64
          minimum: 0
      - in: query
        name: gender
        description: A gender to search for
        schema:
          type: string
      - in: query
        name: minAge
        description: The minimum age of people for whom to show profiles
        schema:
          type: integer
          minimum: 0
      - in: query
        name: maxAge
        description: The maximum age of people for whom to show profiles
        schema:
          type: integer
          minimum: 0
      responses:
        '200':
          description: Successfully retrieved (possibly zero) profiles

  '/profile/{userId}':
    get:
      tags:
      - Profiles
      summary: Get profile of user with given ID
      parameters:
      - in: path
        name: userId
        required: true
        description: The ID of the user for whom to retrieve their profile
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Successfully retrieved profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          description: No profile found
    put:
      tags:
      - Profiles
      summary: Update profile of currently logged in user
      description: |
        Updates the profile of an existing user who is currently logged in
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      - in: path
        name: userId
        required: true
        description: The ID of the user for whom to retrieve their profile
        schema:
          type: integer
          minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: Successfully updated profile
        '400':
          description: Invalid data supplied, ErrorResponse returned detailing specific validation failures
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: No profile found for that user

    delete:
      tags:
      - Profiles
      summary: Delete the profile of user with specified ID
      security:
      - UserToken: []
      parameters:
      - in: path
        name: userId
        required: true
        description: The user ID to delete the profile of
        schema:
          type: integer
          minimum: 1
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted profile
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: No profile found for that user

  '/admin/grant/{id}':
    post:
      tags:
      - Admin
      summary: Gives admin privileges to user
      security:
      - UserToken: []
      parameters:
      - in: path
        name: id
        required: true
        description: The user ID to adminify
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Successfully promoted user to admin
        '400':
          description: User not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  '/admin/revoke/{id}':
    post:
      tags:
      - Admin
      summary: Removes admin privilages from user
      security:
      - UserToken: []
      parameters:
      - in: path
        name: id
        required: true
        description: The user ID to revoke privilages
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Successfully demoted user from admin
        '400':
          description: User not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  '/photo/{id}/profile':
    get:
      tags:
      - Photos
      summary: Gets the profile picture for a given user ID
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      - in: path
        name: id
        required: true
        description: The user ID to retrieve profile photo of
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: 'Successfully retrieved photo for user'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'
        '404':
          description: No profile picture found for user


  '/photo':
    post:
      tags:
      - Photos
      summary: 'Uploading of any and all files, form parameters specify details'
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                isTest:
                  type: string
                  description: 'When true, the uploaded files should be placed in test directory to be later wiped'
                  example: 'true'
                profilePhotoFileName:
                  type: string
                  description: 'If an image being uploaded should be set to profile photo of the uploading user, put the name of the file here. This overwrites any existing profile photo'
                  example:  'my_new_profile_pic.jpg'
                publicPhotoFileNames:
                  type: array
                  description: 'Include here the filenames of all uploads that are to be publicly visible, any files that are not referenced here will be set to private by default'
                  example: 'holiday_pic_1.jpg,holiday_pic_2.png'
                  items:
                    type: string
                files:
                  type: array
                  description: Any number of .png and .jpg files, does not need to have any particular key
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Successfully uploaded one or more files
        '400':
          description: Invalid file type given | Missing file | No files given
        '401':
          description: Unauthorized

  '/photo/{id}':
    get:
      tags:
      - Photos
      summary: 'Get all photos belonging to the profile of some user specified by their id'
      description: 'In order to receive any photo information in response the client requesting must be authenticated. If the authentication ID matches the ID to request photos for (i.e a user is requesting their OWN photos) then all photos are returned, public and private. However if the authentication ID does not match the ID to request photos for (i.e a user is requesting the photos of SOMEONE ELSE then only publicly accesible photo information is returned.'
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      - in: path
        name: id
        required: true
        description: The user ID to retrieve photos of
        schema:
          type: integer
          minimum: 1
      - in: path
        name: page
        required: true
        description: 'The page number to return, starts at 0'
        schema:
          type: integer
          minimum: 0
      - in: path
        name: count
        required: true
        description: 'The number of photos to be returned per page'
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: 'Successfully retrieved (any number of) photos for a user'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'

    delete:
      tags:
      - Photos
      summary: 'Delete photo with given id'
      description: 'If the user is authorized, delete the photo'
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      - in: path
        name: id
        required: true
        description: The ID of photo to be deleted
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Successfully deleted photo
        '401':
          description: Authentication failed
        '403':
          description: User not authorised for this action
        '404':
          description: No such photo found

  '/photo/privacy/{id}':
    patch:
      tags:
      - Photos
      summary: 'Update privacy for a given photo ID'
      security:
      - UserToken: []
      parameters:
      - in: header
        name: JWT-Auth
        required: true
        description: Authentication cookie.
        schema:
          type: string
      - in: path
        name: id
        required: true
        description: The ID of photo to be updated
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Successfully updated privacy
        '404':
          description: No such photo found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - userName
              properties:
                isPublic:
                  type: boolean



servers:
- url: 'http://csse-s302g4.canterbury.ac.nz:8080/api'
components:
  requestBodies:

    postUser:
      content:
        application/json:
          schema:
            type: object
            required:
            - username
            - password
            properties:
              username:
                type: string
                format: email
              password:
                type: string
      description: User object to create

    postTrip:
      content:
        application/json:
          schema:
            type: object
            required:
            - userId
            - tripDataCollection
            properties:
              userId:
                type: integer
                minimum: 1
                format: int64
                description: References a the id of an existing user
              tripDataCollection:
                type: array
                items:
                  $ref: '#/components/schemas/TripData'
      description: 'Trip data necessary for new trip to be added. Note: destination field only needs to include id property, nothing else.'

    putTrip:
      content:
        application/json:
          schema:
            type: object
            required:
            - userId
            - tripId
            - tripDataCollection
            properties:
              userId:
                type: integer
                minimum: 1
                format: int64
                description: References a the id of an existing user
              tripId:
                type: integer
                minimum: 1
                format: int64
                description: References a the id of the trip that is being updated
              tripDataCollection:
                type: array
                items:
                  $ref: '#/components/schemas/TripData'
      description: 'Trip data necessary for new trip to be added. Note: destination field only needs to include id property, nothing else.'

  schemas:
    User:
      type: object
      required:
      - username
      - password
      properties:
        id:
          type: integer
          minimum: 1
          format: int64
          description: >-
            Automatically generated when user is signed up, should never be
            specified manually
        username:
          type: string
          format: email
          example: dave@gmail.com
        password:
          type: string
          minLength: 6
          example: MeowMeow123
          description: >-
            Password is only plaintext when uploading user object for the first
            time, or updating the user password
        salt:
          type: string
          description: Randomly generated salt used for hashing password
        admin:
          type: boolean
          description: Indicates whether or not this user is an admin
        creationDate:
          type: string
          format: ISO Datetime
          description: Generated automatically at the time of creation of the user

    Profile:
      type: object
      required:
      - userId
      - firstName
      - lastName
      - gender
      - dateOfBirth
      - nationalities
      - passports
      - travellerTypes
      properties:
        userId:
          type: integer
          minimum: 1
          format: int64
          description: References a the id of an existing user
        firstName:
          type: string
          example: Dave
        middleName:
          type: string
          example: Robert
        lastName:
          type: string
          example: Smith
        gender:
          type: string
          description: 'Male, Female, or Other'
          example: 'Male'
        dateOfBirth:
          type: string
          format: date yyyy/mm/dd
          example: '1990-04-25'
        creationDate:
          type: string
          format: ISO Datetime
          description: Generated automatically at the time of creation of the profile
        nationalities:
          type: array
          items:
            $ref: '#/components/schemas/CountryDefinition'
        passports:
          type: array
          items:
            $ref: '#/components/schemas/CountryDefinition'
        travellerTypes:
          type: array
          items:
            $ref: '#/components/schemas/TravellerTypeDefinition'

    CountryDefinition:
      type: object
      required:
      - id
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        name:
          type: string
          example: France

    TravellerTypeDefinition:
      type: object
      required:
      - id
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        description:
          type: string
          example: Backpacker

    Destination:
      type: object
      required:
      - name
      - type
      - district
      - latitude
      - longitude
      - country
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: Generated automatically when the destination is first uploaded
        user:
          $ref: '#/components/schemas/User'
          description: The user that owns this destination. If marked as private, this will be whichever user uploaded the destination, otherwise if marked as public (and has been used by another user) then this will be the master admin.
        isPublic:
          type: boolean
          example: false
          description: Whether or not this destination is considered a private destination of the user that added it or whether it is publicly accessible
        name:
          type: string
          example: Eiffel Tower
        type:
          type: string
          example: Monument
          description: 'Type of destination, e.g monument, national park, etc.'
        district:
          type: string
          example: Paris
        latitude:
          type: number
          minimum: -90
          maximum: 90
          example: 48.858093
        longitude:
          type: number
          minimum: -180
          maximum: 180
          example: 2.294694
        country:
          $ref: '#/components/schemas/CountryDefinition'

    Trip:
      type: object
      required:
      - userId
      - tripDataList
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: Generated automatically when the destination is first uploaded
        userId:
          type: integer
          minimum: 1
          format: int64
          description: References a the id of an existing user
        privacy:
          type: boolean
          example: false
          description: Whether or not this trip is considered a private trip of the user that added it or whether it is publicly accessible
        tripDataList:
          type: array
          items:
            $ref: '#/components/schemas/TripData'

    TripData:
      type: object
      required:
      - position
      - destination
      description: >-
        IMPORTANT NOTE: When specifying the destination this trip data
        corresponds to, only the destination's id field must be filled in.
      properties:
        guid:
          type: integer
          format: int64
          minimum: 1
          description: Generated automatically when the tripdata is first uploaded
        position:
          type: integer
          format: int64
          minimum: 0
          description: >-
            The position during the trip at which this tripdata occurs. I.e
            first destination visited has position 0, then position 1, and so
            on.
        destination:
          $ref: '#/components/schemas/Destination'
        arrivalTime:
          type: string
          format: ISO date-time
          example: '2019-04-01T23:26:00.000'
        departureTime:
          type: string
          format: ISO date-time
          example: '2019-04-20T10:30:00.000'

    Photo:
      type: object
      description: 'Object containing references of where to find files for a particular photo'
      properties:
        guid:
          type: integer
          format: int64
          minimum: 1
          description: Generated automatically when the photo is first uploaded
        userId:
          type: integer
          format: int64
          minimum: 1
          description: ID of the user to whom the photo belongs
        filename:
          type: string
          format: url
          example: '/assets/storage/photos/1556841259327_my_image.jpg'
          description: 'The relative URL where the full size file can be found'
        thumbnailFilename:
          type: string
          format: url
          example: '/assets/storage/photos/1556841259327_thumbnail_my_image.jpg'
        isPublic:
          type: boolean
          description: 'Boolean stating whether or not this photo is publicly accesible'
        isProfile:
          type: boolean
          description: 'Boolean stating whether or not this photo is the profile picture of the user'
        uploaded:
          type: string
          format: ISO date-time
          example: '2019-04-01T23:26:00.000'