swagger: '2.0'
info:
  description: SENG302 Team 400 - Travel EA
  version: 1.0.0
  title: Travel EA

  contact:
    email: s302team400@cosc.canterbury.ac.nz

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
  - name: Users
    description: User account calls

  - name: Profiles
    description: Profile calls

  - name: Destinations
    description: Destination calls

  - name: Trips
    description: Trip calls

  - name: Admins
    description: Secured Admin-only calls


paths:
  /user:
    post:
      tags:
        - Users
      summary: Register a new user.
      description: |
        Creates a new user and adds to database
      consumes:
        - application/json
      parameters:
        - in: body
          description: User object to create
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
                format: email
              password:
                type: string
      responses:
        200:
          description: Success
          headers:
            JWT-Auth:
              type: string
              description: Authentication cookie
        400:
          description: Invalid user data | Email already in use

    delete:
      tags:
        - Users
      summary: Delete the user logged in.
      description: |
        Deletes the logged in user from the database
      parameters:
        - in: header
          name: JWT-Auth
          type: string
          required: true
          description: Authentication cookie.
      responses:
        200:
          description: Successfully deleted user with uid&#58; {userId}
        400:
          description: No user with such uid found | Cannot delete Master user

  /user/{id}:
    delete:
      tags:
        - Users
      summary: Delete the user with specified ID.
      description: |
        Deletes the user specified by id parameter from the database
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          minimum: 1
          description: The user ID to be deleted.
        - in: header
          name: JWT-Auth
          type: string
          required: true
          description: Authentication cookie.
      responses:
        200:
          description: Successfully deleted user with uid&#58; {userId}
        400:
          description: No user with such uid found | Cannot delete Master user

  /login:
    post:
      tags:
        - Users
      summary: Login to user account.
      description: |
        Provides authentication to user logging in and stores in database.
      consumes:
        - application/json
      parameters:
        - in: body
          description: User object to create
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
                format: email
              password:
                type: string
      responses:
        200:
          description: Success
          headers:
            JWT-Auth:
              type: string
              description: Authentication cookie
        400:
          description: Invalid user data
        401:
          description: Unauthorised

  /logout:
    post:
      tags:
        - Users
      summary: Logout of user account.
      description: |
        Removes authentication attached to user from database.
      parameters:
        - in: header
          name: JWT-Auth
          type: string
          required: true
          description: Authentication cookie.
      responses:
        200:
          description: Success


  /inventory:
    get:
      tags:
        - Admins
      summary: searches inventory
      operationId: searchInventory
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      produces:
        - application/json
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Profile'
        400:
          description: bad input parameter
    post:
      tags:
        - Admins
      summary: adds an inventory item
      operationId: addInventory
      description: Adds an item to the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: inventoryItem
          description: Inventory item to add
          schema:
            $ref: '#/definitions/Profile'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

definitions:
  User:
    type: object
    required:
      - username
      - password
    properties:
      id:
        type: integer
        minimum: 1
        format: int64
        description: Automatically generated when user is signed up, should never be specified manually
      username:
        type: string
        format: email
        example: "dave@gmail.com"
      password:
        type: string
        minLength: 6
        example: "MeowMeow123"
        description: Password is only plaintext when uploading user object for the first time, or updating the user password
      salt:
        type: string
        description: Randomly generated salt used for hashing password
      admin:
        type: boolean
        description: Indicates whether or not this user is an admin
      creationDate:
        type: string
        format: ISO Datetime
        description: Generated automatically at the time of creation of the user

  Profile:
    type: object
    required:
      - userId
      - firstName
      - lastName
      - gender
      - dateOfBirth
      - nationalities
      - passports
      - travellerTypes
    properties:
      userId:
        type: integer
        minimum: 1
        format: int64
        description: References a the id of an existing user
      firstName:
        type: string
        example: "Dave"
      middleName:
        type: string
        example: "Robert"
      lastName:
        type: string
        example: "Smith"
      gender:
        type: string
        example: "Male, Female, or Other"
      dateOfBirth:
        type: string
        format: date yyyy/mm/dd
        example: "1990-04-25"
      creationDate:
        type: string
        format: ISO Datetime
        description: Generated automatically at the time of creation of the profile
      nationalities:
        type: array
        items:
          $ref: '#/definitions/CountryDefinition'
      passports:
        type: array
        items:
          $ref: '#/definitions/CountryDefinition'
      travellerTypes:
        type: array
        items:
          $ref: '#/definitions/TravellerTypeDefinition'

  CountryDefinition:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
      name:
        type: string
        example: "France"

  TravellerTypeDefinition:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
      description:
        type: string
        example: "Backpacker"

  Destination:
    type: object
    required:
      - name
      - type
      - district
      - latitude
      - longitude
      - country
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
        description: Generated automatically when the destination is first uploaded
      name:
        type: string
        example: "Eiffel Tower"
      type:
        type: string
        example: "Monument"
        description: Type of destination, e.g monument, national park, etc.
      district:
        type: string
        example: "Paris"
      latitude:
        type: number
        minimum: -90.0
        maximum: 90.0
        example: 48.858093
      longitude:
        type: number
        minimum: -180.0
        maximum: 180.0
        example: 2.294694
      country:
        $ref: '#/definitions/CountryDefinition'

  Trip:
    type: object
    required:
      - userId
      - tripDataList
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
        description: Generated automatically when the destination is first uploaded
      userId:
        type: integer
        minimum: 1
        format: int64
        description: References a the id of an existing user
      tripDataList:
        type: array
        items:
          $ref: '#/definitions/TripData'

  TripData:
    type: object
    required:
      - position
      - destination
    description: "IMPORTANT NOTE: When specifying the destination this trip data corresponds to, only the destination's id field must be filled in."
    properties:
      guid:
        type: integer
        format: int64
        minimum: 1
        description: Generated automatically when the tripdata is first uploaded
      position:
        type: integer
        format: int64
        minimum: 0
        description: The position during the trip at which this tripdata occurs. I.e first destination visited has position 0, then position 1, and so on.
      destination:
        $ref: '#/definitions/Destination'
      arrivalTime:
        type: string
        format: ISO date-time
        example: "2019-04-01T23:26:00.000"
      departureTime:
        type: string
        format: ISO date-time
        example: "2019-04-20T10:30:00.000"






# Added by API Auto Mocking Plugin
# host: csse-s302g4.canterbury.ac.nz:8080
# basePath: /
# schemes:
# - http
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /seng302-team400/Travel-EA/1.0.0
schemes:
  - https
  - http