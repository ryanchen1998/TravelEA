package util.validation;

import com.fasterxml.jackson.databind.JsonNode;

/**
 * A class which validates Destination information.
 */
public class DestinationValidator extends Validator {

    private static final String TYPE = "_type";
    private static final String LATITUDE = "latitude";
    private static final String LONGITUDE = "longitude";

    public DestinationValidator(JsonNode form) {
        super(form, new ErrorResponse());
    }

    /**
     * Validates data when creating a new destination.
     *
     * @return an ErrorResponse object with relevant information about each failed field
     */
    public ErrorResponse addNewDestination() {
        // Don't want to check for id as it should be generated by the database
        // Check that the destination name is present, is text, and not empty
        if (this.required("name", "Destination Name") && this.isText("name")) {
            this.minTextLength("name", 1);
        }

        // Check that the destination type is present, is text, and not empty
        if (this.required(TYPE, "Destination Type") && this.isText(TYPE)) {
            this.minTextLength(TYPE, 1);
        }

        // Check that the destination district is present, is text, and not empty
        if (this.required("district", "District") && this.isText("district")) {
            this.minTextLength(TYPE, 1);
        }

        //Check that the destination's country id is present, is text, and not empty
        if (this.required("country", "Country")) {
            // TODO: Check if country is a valid countryDefinition object
        }

        //Check that the latitude is present and within bounds
        if (this.required(LATITUDE, "Latitude") && this.isDoubleOrInt(LATITUDE)) {
            this.maxDoubleValue(LATITUDE, 90);
            this.minDoubleValue(LATITUDE, -90);
        }

        //Check that the longitude is present and within bounds
        if (this.required(LONGITUDE, "Longitude") && this.isDoubleOrInt(LONGITUDE)) {
            this.maxDoubleValue(LONGITUDE, 180);
            this.minDoubleValue(LONGITUDE, -180);
        }

        return this.getErrorResponse();
    }
}
