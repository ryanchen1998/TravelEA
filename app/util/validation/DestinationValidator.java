package util.validation;

import com.fasterxml.jackson.databind.JsonNode;

/**
 * A class which validates Destination information
 */
public class DestinationValidator extends Validator {

    public DestinationValidator(JsonNode form) {
        super(form, new ErrorResponse());
    }

    /**
     * Validates data when creating a new destination
     *
     * @return an ErrorResponse object with relevant information about each failed field
     */
    public ErrorResponse addNewDestination() {
        // Don't want to check for id as it should be generated by the database
        // Check that the destination name is present, is text, and not empty
        if (this.required("name")) {
            if (this.isText("name")) {
                this.minTextLength("name", 1);
            }
        }

        // Check that the destination type is present, is text, and not empty
        if (this.required("_type") && this.isText("_type")) {
            this.minTextLength("_type", 1);
        }

        // Check that the destination district is present, is text, and not empty
        if (this.required("district") && this.isText("district")) {
            this.minTextLength("_type", 1);
        }

        //Check that the destination's country id is present, is text, and not empty
        if (this.required("country")) {
            // TODO: Check if country is a valid countryDefinition object
        }

        //Check that the latitude is present and within bounds
        if (this.required("latitude") && this.isDoubleOrInt("latitude")) {
            this.maxDoubleValue("latitude", 90);
            this.minDoubleValue("latitude", -90);
        }

        //Check that the longitude is present and within bounds
        if (this.required("longitude") && this.isDoubleOrInt("longitude")) {
            this.maxDoubleValue("longitude", 180);
            this.minDoubleValue("longitude", -180);
        }

        return this.getErrorResponse();
    }
}
